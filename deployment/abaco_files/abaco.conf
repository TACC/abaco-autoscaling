[general]
TAG: :dev

[logs]
#level: warning

files: split

host_dir: /home/apim/logs


[store]
# redis
# single db host:
##redis_host: 10.49.10.13

# own db host:
redis_host: 10.49.10.16
redis_port: 6979
# redis_password: ADD_PASSWORD

# mongo
mongo_host: 10.49.10.13
mongo_port: 27017
# mongo_user: ADD_USER
# mongo_password: ADD_PASSWORD


[rabbit]
# url and port for the rabbitmq instance
# single db host --
##uri: amqp://10.49.10.13:5972
# own db host:
uri: amqp://10.49.10.9:5972

[spawner]
# For scalability, worker containers can run on separate physical hosts. At least one
# spawner and one health check worker should be launched on each worker host, and the
# host_id should be the unique for each worker host.
host_id: {{ abaco_host_id }}

# list of queues that spawners on this host will subscribe to.
host_queues: default, special


# An addressable IP for the spawner's host. This config is not currently used but could
# be at a future date to support a conatiner scheduler like swarm or mesos.
host_ip: 172.17.0.1

# When new workers are spawned, a config file must be mounted for communication with rabbit and redis.
# This path should be an absolute path *on the host* where such a config file exists. By default, spawners
# read this path from an environment variable, abaco_conf_host_path, but if this variable isn't set spawners
# will fall back to using this configuration.
abaco_conf_host_path: 

# the maximum number of workers that are allowed to simultaneously be running on a given compute host.
# Spawners will unsubscribe from the command channel when this threshold is met.
# For local development, we intentially keep the max workers small:
max_workers_per_host: 1

# the default maximum number of workers that a given actor can have at one time. admin's can set the
# max_workers attribute for a given actor to a different number. the autoscaler will not scale
# an actor's worker pool beyond this number.
max_workers_per_actor: 1

[workers]
# number of worker containers to initially start when an actor is created
init_count: 0

# max length of time, in seconds, an actor container is allowed to execute before being killed.
# set to -1 for indefinite execution time.
# here, we set the limit to 4 hours for staging.
max_run_time: 14400

# The maximum amount of memory an Actor container can use; similar to the --memory flag in Docker
# set to -1 for unlimited memory
# examples:
# limit each actor to 1 gig
#mem_limit = 1g
# limit each actor to 5 meg
# mem_limit = 5m

# maximum number of CPUs each actor will have available to them. Does not guarantee these CPU resources
# to each actor, but rather provides the upper bound on available resources.
# set to -1 for unlimited CPU resources.
# allow access to 1 cpu
max_cpus = -1

# length of time, in seconds, to keep an idle worker alive. Set to -1 to keep workers
# alive indefinitely.
# Here, we are setting the ttl to 24 hours.
worker_ttl: 1800

# whether worker containers should be scheduled with the auto_remove flag. In general, this should be set to true
# but requires docker version > 1.25 so should be set to false when that is not the case. Also can be helpful to set to
# False for development/debugging efforts.
auto_remove: True

# Whether the workers should have OAuth clients generated for them:
generate_clients: False

# a list of mounts to make for every actor container, separated by comma (,) characters.
# Mounts should be of the form <absolute_host_path>:<absolute_container_path>:<mode>
# where mode is either ro for read-only or rw for read-write.
global_mounts: /home/apim/data1:/_abaco_data1:ro,/home/apim/data2:/_abaco_data2:rw

# whether to leave the actor containers or remove them. Should be False in
# staging/production but setting True can be helpful when debugging locally.
leave_containers: False

# whether to run the actor containers as the UID associated with the owner of the actor.
# requires TAS_ROLE_ACCT and TAS_ROLE_PASS passes as environment variables.
# Default value is False in which case the container run as the UID set in the container image.
use_tas_uid: True

# path on the workers host to use for mounting temporary fifo's for processing binary messages.
fifo_host_path_dir: /home/apim/_abaco_fifos

# path on the workers host to use for mounting temporary socketes for processing execution results.
socket_host_path_dir: /home/apim/_abaco_sockets

# when this setting is not configured, spawners and workers started programmatically will be added to the
# default docker network for the host.
docker_network: apim_abaco


[docker]
# url to use for docker daemon
dd: unix://var/run/docker.sock


[web]
# type of access control for the web front end. supports: 'jwt', and 'none'
access_control: jwt

# whether to allow the use of nonces for authenticating requests to the API. The x-nonce query parameter is only
# checked in the absence of a JWT header.
accept_nonce: True

# The user_role needed for "basic" level usage
user_role: Internal/everyone

# the name of the tenant when deployed behind apim (jwt access_control)
tenant_name: dev_staging

# public key for the apim instance when deployed behind apim (jwt access control)
apim_public_key: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCUp/oV1vWc8/TkQSiAvTousMzOM4asB2iltr2QKozni5aVFu818MpOLZIr8LMnTzWllJvvaA5RAAdpbECb+48FjbBe0hseUdN5HpwvnH/DW8ZccGvk53I6Orq7hLCv1ZHtuOCokghz/ATrhyPq+QktMfXnRS4HrKGJTzxaCcU7OQIDAQAB

# whether the web apps return a stacktrace or a nice JSON object on an APIException:
# 'true' or 'false'
show_traceback: False

# Amount of time, in seconds, to store log data. Set to -1 to store indefinitely.
# Here we set the to 24 hours.
log_ex: 86400

# Either camel or snake: Whether to return responses in camel case or snake. Default is snake.
case: snake

# The maximum content length, in bytes, allowed for raw (binary) data messages.
max_content_length: 500000000

# list of all allowable queues
all_queues: default, special

