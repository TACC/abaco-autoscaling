#!/usr/bin/env python3

#import requests
import json
import os
import sys
import pprint
import ast
import openstack

sys.dont_write_bytecode = True
#openstack.enable_logging(debug=True)

def get_cached_networks():
  with open('/tmp/networks.json') as f:
    json_object = json.load(f)
  return json_object

def cache_networks():
  data = []
  conn = openstack.connect()
  for s in conn.network.networks(project_id=os.environ['OS_PROJECT_ID']):
    data.append(s.to_dict())
  with open('/tmp/networks.json', 'w') as fp:
    json.dump(data, fp)
  return

def get_cached_servers():
  with open('/tmp/servers.json') as f:
    json_object = json.load(f)
  return json_object

def cache_servers():
  data = []
  conn = openstack.connect()
  for s in conn.compute.servers():
    data.append(s.to_dict())
  with open('/tmp/servers.json', 'w') as fp:
    json.dump(data, fp)
  return


def get_server_priv_ip(server, network):
  try:
    for address in server['addresses'][network]:
      if address['OS-EXT-IPS:type'] == 'fixed':
        return address['addr']
  except:
    return None

def get_server_id(server):
  try:
    return server['id']
  except:
    return None

def get_server_name(server):
  try:
    return server['name']
  except:
    return None

def get_server_group(server):
  try: 
    return server['metadata']['group']
  except:
    return None


def init_inventory():
  
  init_inventory = {
    "_meta": {
      "hostvars": {
        "pubkey": "x",
        "privke": "y"
      },
    },
    "all": {
      "children": [
        "ungrouped", 
        "computes", 
        "servers", 
      ]
    },
    "ungrouped": { "hosts": []},
    "computes": { "hosts": []},
    "servers": { "hosts": []},
  }

  return init_inventory


if __name__ == '__main__':
  inventory = init_inventory()

  # uncomment these 2 to pull from openstack live
  cache_networks()
  cache_servers()

  ns = get_cached_networks()
  servers = get_cached_servers()
  netname = ns[0]['name']

  for s in servers:
    sname = get_server_name(s) 
    if get_server_group(s) != None:
      inventory['_meta']['hostvars'][sname] = {'openstack_id': get_server_id(s), 'ansible_ssh_host': get_server_priv_ip(s, netname), 'ansible_user': 'centos'}
    if get_server_group(s) == 'computes':
      inventory['computes']['hosts'].append(sname)
    if get_server_group(s) == 'servers':
      inventory['servers']['hosts'].append(sname)
  print(json.dumps(inventory))

